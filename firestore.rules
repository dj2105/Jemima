rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ------------ helpers (expressions only, no `if`) ------------ */

    function isSignedIn() {
      return request.auth != null;
    }

    function roomData(code) {
      return get(/databases/$(database)/documents/rooms/$(code)).data;
    }

    function isHost(code) {
      return isSignedIn() && roomData(code).meta.hostUid == request.auth.uid;
    }

    function isGuest(code) {
      return isSignedIn() && roomData(code).meta.guestUid == request.auth.uid;
    }

    function isParticipant(code) {
      return isHost(code) || isGuest(code);
    }

    function allowedRoomKeys() {
      return ['state', 'countdownT0', 'seed', 'meta'];
    }

    function allowedPlayerKeys() {
      return ['answers', 'marks', 'awardsGiven', 'timestamps', 'mathsAnswers', 'mathsScore'];
    }

    /* ---------------------------- rules --------------------------- */

    match /rooms/{code} {
      // Read: only host or guest; never list all rooms
      allow get: if isParticipant(code);
      allow list: if false;

      // Create: host creates room shell (must set their hostUid in meta); restrict keys
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(allowedRoomKeys())
        && request.resource.data.meta is map
        && request.resource.data.meta.hostUid == request.auth.uid;

      // Update: host controls room fields; restrict keys
      allow update: if isHost(code)
        && request.resource.data.keys().hasOnly(allowedRoomKeys());

      allow delete: if false;

      // Player subdocs
      match /players/{role} {
        // Read: participants only; never list
        allow get: if isParticipant(code);
        allow list: if false;

        // Create/Update: each player only their own doc; restrict keys
        allow create, update: if isSignedIn()
          && request.resource.data.keys().hasOnly(allowedPlayerKeys())
          && (
            (role == 'host' && isHost(code)) ||
            (role == 'guest' && isGuest(code))
          );

        allow delete: if false;
      }
    }
  }
}
